
version: 2.1
orbs:
  # For slack alerts
  slack: circleci/slack@4.1
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0

commands:
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          no_output_timeout: 30m
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name capstone-${CIRCLE_WORKFLOW_ID}
            echo capstone-${CIRCLE_WORKFLOW_ID}
            #exit 1
jobs: 
  deploy_k8_cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          command: |  
            yum -y install tar gzip      
      - run:
          name: Install dependencies
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - run:
          name: create cluster
          command: | 
            eksctl create cluster \
            --name k8-udacapstone \
            --version 1.20 \
            --region us-west-2 \
            --nodegroup-name udacaps-k8-nodes \
            --node-type t2.micro \
            --nodes 1
      
  deploy_k8_deployment:
    docker:  
      - image: amazon/aws-cli
    steps:
      - checkout   
      - run:
          name: Install dependencies
          command: |
            apt update && apt install build-essential checkinstall zlib1g-dev libtemplate-perl
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
            openssl sha1 -sha256 kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --short --client

      - run: 
          name: check cluster status
          command: | 
            aws eks --region us-west-2 update-kubeconfig --name k8-udacapstone
            kubectl get nodes

      - run:
          name: create deployment
          command: kubectl apply -f .circleci/files/uda-capstone-dep.yml

  deploy_client:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: creates infrastructure
          command: |
            aws cloudformation deploy --template-file .circleci/files/client.yml --tags project=udacity --stack-name capstone-${CIRCLE_WORKFLOW_ID} --parameter-overrides ID=client-${CIRCLE_WORKFLOW_ID} 
      - run: 
          command: |  
            yum -y install tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            rm .circleci/ansible/inventory.txt # clears the inventory file to have only the existing instances
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            ls ~/
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  configure_client:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["41:6b:ff:3f:03:16:d6:a6:77:b9:d0:46:81:95:ca:83"]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible     
      - run:
          name: Configure server
          command: |
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/deploy-client.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          
workflows:
  default:
    jobs:
      #- deploy_k8_cluster
      - deploy_k8_deployment
#          requires: [deploy_k8_cluster]
      - deploy_client
#         requires: [deploy_k8_cluster]
#      - configure_client:
#           requires: [deploy_client, deploy_k8_cluster]
#      - test_connectivity:
#          requires: [deploy_client]
#      - send_logs:
#          requires: [test_connectivity]
#      - send_slack_alert:
#          requires: [test_connectivity]
#      


