
version: 2.1
orbs:
  # For slack alerts
  slack: circleci/slack@4.1

commands:
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          no_output_timeout: 30m
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name capstone-${CIRCLE_WORKFLOW_ID}
            echo capstone-${CIRCLE_WORKFLOW_ID}
            #exit 1
jobs: 
  deploy_client:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: creates infrastructure
          command: |
            aws cloudformation deploy --template-file .circleci/files/client.yml --tags project=udacity --stack-name capstone-${CIRCLE_WORKFLOW_ID} --parameter-overrides ID=client-${CIRCLE_WORKFLOW_ID} 
  configure_client:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            rm .circleci/ansible/inventory.txt # clears the inventory file to have only the existing instances
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            ls ~/
      - run:
          name: Configure server
          command: |
            cat /tmp/.circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/deploy-client.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          
workflows:
  default:
    jobs:
      - deploy_client
      - configure_client:
           requires: [deploy_client]
#      - test_connectivity:
#          requires: [deploy_client]
#      - send_logs:
#          requires: [test_connectivity]
#      - send_slack_alert:
#          requires: [test_connectivity]
#      - deploy_server


