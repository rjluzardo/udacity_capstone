
version: 2.1
orbs:
  # For slack alerts
  slack: circleci/slack@4.1
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0

commands:
  
  destroy-k8-deployment:
    description: Destroy k8-environment
    steps:
      - run:
          when: on_fail
          name: delete deploy
          command: |
            echo "**********INSTALLING KUBECTL*******" 
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            aws eks --region us-west-2 update-kubeconfig --name k8-udacapstone
            ./kubectl delete deploy udacapgreen-deployment
            ./kubectl delete svc udacap-pas-lb

  destroy-cluster:
    description: Destroy cluster
    steps:
      - run:
          name: Destroy nodegroups
          command: eksctl delete nodegroup --cluster=k8-udacapstone --name=udacaps-k8-nodes
      - run:
          name: Destroy cluster
          command: eksctl delete cluster --name=k8-udacapstone 
jobs: 
  deploy_k8_cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          command: |  
            yum -y install tar gzip      
      - run:
          name: Install dependencies
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - run:
          name: create cluster
          command: | 
            eksctl create cluster \
            --name k8-udacapstone \
            --version 1.20 \
            --region us-west-2 \
            --nodegroup-name udacaps-k8-nodes \
            --node-type t2.micro \
            --nodes 3          

  linting-green:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: whereami
          command: |
            pwd
            ls -la
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum ".circleci/files/green/requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            cd .circleci/files/green
            pwd
            ls -la
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      
      - save_cache:
          paths:           
            - .circleci/files/venv
          key: v1-dependencies-{{ checksum ".circleci/files/green/requirements.txt" }}

      - run:
          name: green run lint
          command: |
            cd .circleci/files/green
            . venv/bin/activate
            pwd
            ls
            make lint        


  deploy_blue_deployment:
    docker:  
      - image: amazon/aws-cli
    steps:
      - checkout   
      - run:
          name: Install dependencies
          command: |
            echo "**********INSTALLING KUBECTL*******" 
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            echo "**********INSTALLING TAR*******"
            yum -y install tar gzip

      - run: 
          name: check cluster status
          command: | 
            aws eks --region us-west-2 update-kubeconfig --name k8-udacapstone
            ./kubectl cluster-info
            ./kubectl get nodes -o wide 
            ./kubectl apply -f .circleci/files/blue/udacapblue-dep.yml
            ./kubectl apply -f .circleci/files/udacap-act-lb.yml
            ./kubectl get pods
            ./kubectl get svc
            export UDACAP_BLUE_URL=$(./kubectl get svc udacap-act-lb -o jsonpath='{.status.loadBalancer.ingress[*].hostname}') 
            echo "[url]" >> ".circleci/files/udacap_blue_url.txt"
            echo $UDACAP_BLUE_URL>> ".circleci/files/udacap_blue_url.txt"
      - run:
          name: check variable      
          command: cat .circleci/files/udacap_blue_url.txt
      - persist_to_workspace:
          root: .circleci/files
          paths:
            - udacap_blue_url.txt
      - run: sleep 90;

  deploy_green_deployment:
    docker:  
      - image: amazon/aws-cli
    steps:
      - checkout   
      - run:
          name: Install dependencies
          command: |
            echo "**********INSTALLING KUBECTL*******" 
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            echo "**********INSTALLING TAR*******"
            yum -y install tar gzip

      - run: 
          name: check cluster status
          command: | 
            aws eks --region us-west-2 update-kubeconfig --name k8-udacapstone
            ./kubectl cluster-info
            ./kubectl get nodes -o wide 
            ./kubectl apply -f .circleci/files/green/udacapgreen-dep.yml
            ./kubectl apply -f .circleci/files/udacap-pas-lb.yml
            ./kubectl get pods
            ./kubectl get svc
            export UDA_CAPSTONE_URL=$(./kubectl get svc udacap-pas-lb -o jsonpath='{.status.loadBalancer.ingress[*].hostname}') 
            echo "[url]" >> ".circleci/files/udacap_green_url.txt"
            echo $UDA_CAPSTONE_URL >> ".circleci/files/udacap_green_url.txt"
      - run:
          name: check variable      
          command: cat .circleci/files/udacap_green_url.txt
      - persist_to_workspace:
          root: .circleci/files
          paths:
            - udacap_green_url.txt
      - run: sleep 90;

  blue-smoke-test:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |  
              echo "**********INSTALLING TAR*******"
              yum -y install tar gzip
              yum -y install curl
        - attach_workspace:
            at: /tmp/.circleci/files/
        - run:
            name: Get SERVICE URL
            command: |
              cat /tmp/.circleci/files/udacap_blue_url.txt
              UDACAP_BLUE_URL=$(cat /tmp/.circleci/files/udacap_blue_url.txt | grep -v "url")
              echo "${UDACAP_BLUE_URL}"
              curl -Is http://${UDACAP_BLUE_URL}
              if curl -s http://${UDACAP_BLUE_URL} | grep "Hello"
                then
                  ACT_ENV=udacapblue-deployment
                  ACT_URL=http://${UDACAP_BLUE_URL}
                else
                  exit
                fi
              echo $ACT_ENV
              echo $ACT_URL
  green-smoke-test:
      docker:
        - image: amazon/aws-cli
      environment:
        ACT_ENV: udacapblue
        PAS_ENV: udacapgreen 
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              echo "**********INSTALLING KUBECTL*******" 
              curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
              chmod +x ./kubectl
              echo "**********INSTALLING TAR*******"
              yum -y install tar gzip
              yum -y install curl
        - attach_workspace:
            at: /tmp/.circleci/files/
        - run:
            name: smoke and migrate
            command: |
              cat /tmp/.circleci/files/udacap_green_url.txt
              UDACAP_GREEN_URL=$(cat /tmp/.circleci/files/udacap_green_url.txt | grep -v "url")
              echo "${UDACAP_GREEN_URL}"
              curl -Is http://${UDACAP_GREEN_URL}
              if curl -s http://${UDACAP_GREEN_URL} | grep "Hello"
                then
                  aws eks --region us-west-2 update-kubeconfig --name k8-udacapstone
                  ACT_ENV=udacapgreen
                  PAS_ENV=udacapblue
                  ./kubectl delete svc udacap-pas-lb
                  ./kubectl patch service udacap-act-lb -p '{"spec":{"selector":{"app": "udacapgreen"}}}'
                  export ACT_URL=$(./kubectl get svc udacap-act-lb -o jsonpath='{.status.loadBalancer.ingress[*].hostname}') 
                else
                  exit
                fi
              echo "Running Environment is" $ACT_ENV
              echo "on the URL" $ACT_URL     
        - destroy-k8-deployment
  cleanup:
      docker:
        - image: amazon/aws-cli
      environment:
        ACT_ENV: udacapgreen
        PAS_ENV: udacapblue
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              echo "**********INSTALLING KUBECTL*******" 
              curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
              chmod +x ./kubectl
        - run:
            name: Delete Blue
            command: |
                  aws eks --region us-west-2 update-kubeconfig --name k8-udacapstone
                  ./kubectl delete deploy ${PAS_ENV}-deployment

          
workflows:
  default:
    jobs:
      #- deploy_k8_cluster
      - linting-green
      #- deploy_blue_deployment
          #requires: [deploy_k8_cluster]
      #- deploy_green_deployment
          #requires: [deploy_k8_cluster]
      #- blue-smoke-test:
      #      requires: [deploy_blue_deployment]
      #- green-smoke-test:
      #      requires: [deploy_green_deployment, blue-smoke-test]
      #- cleanup:
      #      requires: [green-smoke-test]