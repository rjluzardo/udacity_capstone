
version: 2.1
orbs:
  # For slack alerts
  slack: circleci/slack@4.1
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0

commands:
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          no_output_timeout: 30m
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name capstone-${CIRCLE_WORKFLOW_ID}
            echo capstone-${CIRCLE_WORKFLOW_ID}
            #exit 1
jobs: 
  deploy_k8_cluster:
    executor: << parameters.executor >>
    parameters:
      authenticator-release-tag:
        default: ''
        type: string
      aws-max-polling-wait-time:
        default: 20m0s
        description: |
          Max wait time in any AWS polling operations
        type: string
      aws-profile:
        default: ''
        type: string
      aws-region:
        default: ''
        type: string
      cluster-name:
        default: 'k8-udacapstone'
        type: string
      executor:
        default: aws-eks/python3
        type: executor
      no-output-timeout:
        default: 45m
        type: string
      show-eksctl-command:
        default: false
        type: boolean
      ssh-access:
        default: false
        description: |
          Control SSH access for nodes
        type: boolean
      ssh-public-key:
        default: ''
        type: string
      tags:
        default: ''
        type: string
      verbose:
        default: 3
        type: integer
    steps:
      - install-aws-iam-authenticator:
          release-tag: << parameters.authenticator-release-tag >>
      - create-cluster:
          aws-max-polling-wait-time: << parameters.aws-max-polling-wait-time >>
          aws-profile: << parameters.aws-profile >>
          aws-region: << parameters.aws-region >>
          cluster-name: << parameters.cluster-name >>
          no-output-timeout: << parameters.no-output-timeout >>
          show-eksctl-command: << parameters.show-eksctl-command >>
          skip-kubectl-install: false
          ssh-access: << parameters.ssh-access >>
          ssh-public-key: << parameters.ssh-public-key >>
          tags: << parameters.tags >>
          verbose: << parameters.verbose >>
  deploy_client:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: creates infrastructure
          command: |
            aws cloudformation deploy --template-file .circleci/files/client.yml --tags project=udacity --stack-name capstone-${CIRCLE_WORKFLOW_ID} --parameter-overrides ID=client-${CIRCLE_WORKFLOW_ID} 
      - run: 
          command: |  
            yum -y install tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            rm .circleci/ansible/inventory.txt # clears the inventory file to have only the existing instances
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            ls ~/
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  configure_client:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["41:6b:ff:3f:03:16:d6:a6:77:b9:d0:46:81:95:ca:83"]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible     
      - run:
          name: Configure server
          command: |
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/deploy-client.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          
workflows:
  default:
    jobs:
      - deploy_k8_cluster
#          cluster-name: k8-udacapstone
      - deploy_client
      - configure_client:
           requires: [deploy_client, deploy_k8_cluster]
#      - test_connectivity:
#          requires: [deploy_client]
#      - send_logs:
#          requires: [test_connectivity]
#      - send_slack_alert:
#          requires: [test_connectivity]
#      


